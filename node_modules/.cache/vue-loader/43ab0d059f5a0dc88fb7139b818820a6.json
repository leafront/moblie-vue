{"remainingRequest":"/Users/shanliguo/Documents/wm-mobile/mobile-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shanliguo/Documents/wm-mobile/mobile-vue/src/view/business/business-refund/refund.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shanliguo/Documents/wm-mobile/mobile-vue/src/view/business/business-refund/refund.vue","mtime":1554617138488},{"path":"/Users/shanliguo/Documents/wm-mobile/mobile-vue/node_modules/cache-loader/dist/cjs.js","mtime":1551093967131},{"path":"/Users/shanliguo/Documents/wm-mobile/mobile-vue/node_modules/babel-loader/lib/index.js","mtime":1551093966843},{"path":"/Users/shanliguo/Documents/wm-mobile/mobile-vue/node_modules/cache-loader/dist/cjs.js","mtime":1551093967131},{"path":"/Users/shanliguo/Documents/wm-mobile/mobile-vue/node_modules/vue-loader/lib/index.js","mtime":1551093973497}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n    Tag,\n    Col,\n    Icon,\n    Cell,\n    CellGroup,\n    Swipe,\n    Toast,\n    SwipeItem,\n    GoodsAction,\n    GoodsActionBigBtn,\n    GoodsActionMiniBtn,\n    NumberKeyboard,\n    NavBar\n} from 'vant';\nimport storeData from './store/index';\nimport {getBLen} from '@/validate/common';\n\nexport default {\n    name: 'RefundOpera',\n    components: {\n        [Tag.name]: Tag,\n        [Col.name]: Col,\n        [Icon.name]: Icon,\n        [Cell.name]: Cell,\n        [CellGroup.name]: CellGroup,\n        [Swipe.name]: Swipe,\n        [SwipeItem.name]: SwipeItem,\n        [GoodsAction.name]: GoodsAction,\n        [GoodsActionBigBtn.name]: GoodsActionBigBtn,\n        [GoodsActionMiniBtn.name]: GoodsActionMiniBtn,\n        NumberKeyboard: NumberKeyboard,\n        NavBar: NavBar\n    },\n    props: {\n        limitAmount: {\n            type: String,\n            default: ''\n        }\n    },\n    data() {\n        return Object.assign(storeData.call(this), {\n            keyboardShow: true,\n            // btnStatus: false, // 符不符合提交标准\n            cursorStatus: false,\n        });\n    },\n    created() {\n        console.log(this.limitAmount);\n        if (this.keyboardShow == true && this.amount.length == 0) {\n            this.cursorStatus = true;\n        }\n    },\n    watch: {\n        'amount': function (val, old) {\n            if (val) {\n                if (val) {\n                    this.cursorStatus = false;\n                } else {\n                    this.cursorStatus = true;\n                }\n                this.refundRule[0] = 1;\n                if (val * 1 > 0) {\n                    this.btnStatus = true;\n                } else {\n                    this.btnStatus = false;\n                }\n                if (this.remark) {\n                    this.refundStatus = true;\n                } else {\n                    this.refundStatus = false;\n                }\n\n                if (val * 100 > this.limitAmount * 1) {\n                    this.btnStatus = false;\n                    Toast('输入的金额大于最大退款额');\n                    this.amount = old;\n                    return;\n                }\n\n                if (Math.floor(val * 1) > 100000) {\n                    this.btnStatus = false;\n                    Toast('可输入的最大金额为100,000');\n                    this.amount = old;\n                    return;\n                }\n            } else {\n                this.btnStatus = false;\n                this.refundRule[0] = 0;\n                this.btnStatus = false;\n            }\n            if (val !== old) {\n                this.refundInputStatus[0] = 1;\n                this.refundInputStatus[1] = 0;\n            } else {\n                this.refundInputStatus[0] = 0;\n            }\n        },\n        'remark': function (val, old) {\n            if (val) {\n                this.refundRule[1] = 1;\n            } else {\n                this.refundRule[1] = 0;\n            }\n            if (val !== old) {\n                this.refundInputStatus[0] = 0;\n                this.refundInputStatus[1] = 1;\n            } else {\n                this.refundInputStatus[1] = 0;\n            }\n            if (getBLen(val + '') > 100) {\n                this.remark = old;\n                Toast('备注在100个字符之内');\n                return;\n            }\n        }\n    },\n    mounted() {\n        this.$on('getValue', () => {\n            this.submitAction();\n        })\n    },\n    methods: {\n        submitAction() {\n            if (this.btnStatus === false) {\n\n                if (!this.amount) {\n                    Toast('请输入收款金额');\n                }\n\n                if (Math.floor(this.amount) > 100000) {\n                    Toast('可输入的最大金额为100,000');\n                }\n                return;\n            }\n            if ((this.refundRule.join() === '1,1') || (this.refundRule.join() === '1,0')) {\n                this.refundStatus = true;\n                this.refundRuleTextStatus = false;\n                // let fetchLoading = Toast.loading({\n                //     mask: true,\n                //     message: '请等待...'\n                // });\n                // this.createOrderFetch(fetchLoading);\n                this.$emit('submit', {\n                    amount: this.amount\n                });\n            } else {\n                this.refundStatus = false;\n                this.refundRuleTextStatus = true;\n            }\n        },\n        remarkToggleHandle() {\n            this.remarkShow = true;\n        },\n        onInput(value) {\n            if (value === '.') {\n                if ((this.amount + '').indexOf('.') > -1) {\n                    return;\n                }\n            }\n            if (value === '0' || value === 0) {\n                if (this.amount + '' === '0') {\n                    return;\n                }\n            }\n\n            if (this.amount + '' === '0') {\n                if (value !== '.') {\n                    return;\n                }\n            }\n\n\n            if ((this.amount + '').indexOf('.') > -1) {\n                if ((this.amount + '').split(\".\")[1].length > 1) {\n                    return;\n                }\n            }\n\n            this.amount = this.amount + (value + '');\n        },\n        onDelete() {\n            if ((this.amount + '').length > 0) {\n                this.amount = this.amount.substring(0, this.amount.length - 1);\n                if (this.amount) {\n                    this.cursorStatus = false;\n                } else {\n                    this.cursorStatus = true;\n                }\n            }\n        },\n        keyFocus() {\n            this.keyboardShow = true;\n            document.activeElement.blur();\n        }\n    }\n};\n",{"version":3,"sources":["refund.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"refund.vue","sourceRoot":"src/view/business/business-refund","sourcesContent":["<template>\n    <div>\n        <div class=\"\">\n            <div class=\"refund-inner\">\n\n                <div class=\"item pb3\"\n                     :class=\"this.refundInputStatus[0] === 1 ? 'bB1' : ''\"\n                >\n                    <div class=\"item-label\">退款金额（元）</div>\n\n                    <div class=\"cashier-input\">\n                        <div class=\"flex-content flex-content-align\">\n                            <div class=\"cashier-input-unit mr4\">￥</div>\n                            <input v-model=\"this.amount\"\n                                   @touchstart.native.stop=\"keyboardShow = true\"\n                                   @focus=\"keyFocus()\"\n                                   class=\"item-input amount-input\"\n                                   :class=\"cursorStatus ? 'cursor' : ''\"\n                                   maxlength=\"9\"\n                                   placeholder=\"0.00\"/>\n                        </div>\n                        <p class=\"item-notice\"\n                           v-show=\"refundRule[0] === 0 &&\n                               refundRuleTextStatus === true\">不能为空</p>\n                    </div>\n                </div>\n                <div class=\"mt10\">\n                    <div v-if=\"!remarkShow\">\n                    <span\n                            @click=\"remarkToggleHandle()\"\n                            class=\"font-n-b\"\n                    >添加退款备注</span>\n                    </div>\n                    <div class=\"item pt0\"\n                         :class=\"this.refundInputStatus[1] === 1 ? 'bB1' : ''\"\n                         v-else\n                    >\n                        <input v-model=\"remark\"\n                               class=\"item-input remark\"\n                               style=\"width: 100%;\"\n                               placeholder=\"请输入退款备注\"/>\n                    </div>\n                </div>\n            </div>\n            <van-number-keyboard\n                    :show=\"keyboardShow\"\n                    extra-key=\".\"\n                    close-button-text=\"完成\"\n                    @blur=\"keyboardShow = false\"\n                    @input=\"onInput\"\n                    @delete=\"onDelete\"\n            />\n\n        </div>\n\n    </div>\n</template>\n\n<script>\n    import {\n        Tag,\n        Col,\n        Icon,\n        Cell,\n        CellGroup,\n        Swipe,\n        Toast,\n        SwipeItem,\n        GoodsAction,\n        GoodsActionBigBtn,\n        GoodsActionMiniBtn,\n        NumberKeyboard,\n        NavBar\n    } from 'vant';\n    import storeData from './store/index';\n    import {getBLen} from '@/validate/common';\n\n    export default {\n        name: 'RefundOpera',\n        components: {\n            [Tag.name]: Tag,\n            [Col.name]: Col,\n            [Icon.name]: Icon,\n            [Cell.name]: Cell,\n            [CellGroup.name]: CellGroup,\n            [Swipe.name]: Swipe,\n            [SwipeItem.name]: SwipeItem,\n            [GoodsAction.name]: GoodsAction,\n            [GoodsActionBigBtn.name]: GoodsActionBigBtn,\n            [GoodsActionMiniBtn.name]: GoodsActionMiniBtn,\n            NumberKeyboard: NumberKeyboard,\n            NavBar: NavBar\n        },\n        props: {\n            limitAmount: {\n                type: String,\n                default: ''\n            }\n        },\n        data() {\n            return Object.assign(storeData.call(this), {\n                keyboardShow: true,\n                // btnStatus: false, // 符不符合提交标准\n                cursorStatus: false,\n            });\n        },\n        created() {\n            console.log(this.limitAmount);\n            if (this.keyboardShow == true && this.amount.length == 0) {\n                this.cursorStatus = true;\n            }\n        },\n        watch: {\n            'amount': function (val, old) {\n                if (val) {\n                    if (val) {\n                        this.cursorStatus = false;\n                    } else {\n                        this.cursorStatus = true;\n                    }\n                    this.refundRule[0] = 1;\n                    if (val * 1 > 0) {\n                        this.btnStatus = true;\n                    } else {\n                        this.btnStatus = false;\n                    }\n                    if (this.remark) {\n                        this.refundStatus = true;\n                    } else {\n                        this.refundStatus = false;\n                    }\n\n                    if (val * 100 > this.limitAmount * 1) {\n                        this.btnStatus = false;\n                        Toast('输入的金额大于最大退款额');\n                        this.amount = old;\n                        return;\n                    }\n\n                    if (Math.floor(val * 1) > 100000) {\n                        this.btnStatus = false;\n                        Toast('可输入的最大金额为100,000');\n                        this.amount = old;\n                        return;\n                    }\n                } else {\n                    this.btnStatus = false;\n                    this.refundRule[0] = 0;\n                    this.btnStatus = false;\n                }\n                if (val !== old) {\n                    this.refundInputStatus[0] = 1;\n                    this.refundInputStatus[1] = 0;\n                } else {\n                    this.refundInputStatus[0] = 0;\n                }\n            },\n            'remark': function (val, old) {\n                if (val) {\n                    this.refundRule[1] = 1;\n                } else {\n                    this.refundRule[1] = 0;\n                }\n                if (val !== old) {\n                    this.refundInputStatus[0] = 0;\n                    this.refundInputStatus[1] = 1;\n                } else {\n                    this.refundInputStatus[1] = 0;\n                }\n                if (getBLen(val + '') > 100) {\n                    this.remark = old;\n                    Toast('备注在100个字符之内');\n                    return;\n                }\n            }\n        },\n        mounted() {\n            this.$on('getValue', () => {\n                this.submitAction();\n            })\n        },\n        methods: {\n            submitAction() {\n                if (this.btnStatus === false) {\n\n                    if (!this.amount) {\n                        Toast('请输入收款金额');\n                    }\n\n                    if (Math.floor(this.amount) > 100000) {\n                        Toast('可输入的最大金额为100,000');\n                    }\n                    return;\n                }\n                if ((this.refundRule.join() === '1,1') || (this.refundRule.join() === '1,0')) {\n                    this.refundStatus = true;\n                    this.refundRuleTextStatus = false;\n                    // let fetchLoading = Toast.loading({\n                    //     mask: true,\n                    //     message: '请等待...'\n                    // });\n                    // this.createOrderFetch(fetchLoading);\n                    this.$emit('submit', {\n                        amount: this.amount\n                    });\n                } else {\n                    this.refundStatus = false;\n                    this.refundRuleTextStatus = true;\n                }\n            },\n            remarkToggleHandle() {\n                this.remarkShow = true;\n            },\n            onInput(value) {\n                if (value === '.') {\n                    if ((this.amount + '').indexOf('.') > -1) {\n                        return;\n                    }\n                }\n                if (value === '0' || value === 0) {\n                    if (this.amount + '' === '0') {\n                        return;\n                    }\n                }\n\n                if (this.amount + '' === '0') {\n                    if (value !== '.') {\n                        return;\n                    }\n                }\n\n\n                if ((this.amount + '').indexOf('.') > -1) {\n                    if ((this.amount + '').split(\".\")[1].length > 1) {\n                        return;\n                    }\n                }\n\n                this.amount = this.amount + (value + '');\n            },\n            onDelete() {\n                if ((this.amount + '').length > 0) {\n                    this.amount = this.amount.substring(0, this.amount.length - 1);\n                    if (this.amount) {\n                        this.cursorStatus = false;\n                    } else {\n                        this.cursorStatus = true;\n                    }\n                }\n            },\n            keyFocus() {\n                this.keyboardShow = true;\n                document.activeElement.blur();\n            }\n        }\n    };\n</script>\n\n<style lang=\"less\" scoped>\n    @import \"../../../style/formation.less\";\n\n    .refund {\n        &-inner {\n            padding: 10px 16px;\n            background-color: @white;\n            .item {\n                position: relative;\n                border-bottom: 1px solid @border-color-dark;\n                &.bB1 {\n                    border-bottom-color: @main-theme-color;\n                }\n                &-label {\n                    font-size: @font-normal;\n                    line-height: 1.25;\n                    color: @text-color-normal;\n                    margin-bottom: 4px;\n                }\n                &-input {\n                    border: none;\n                    background-color: transparent;\n                    color: @text-color;\n                    line-height: 1.25;\n                    font-size: @font-normal;\n                    caret-color: @main-theme-color;\n                    padding-left: 0;\n                    &.remark {\n                        line-height: 1.75;\n                    }\n                    &::-webkit-input-placeholder {\n                        color: @border-color-dark;\n                    }\n                }\n                &-notice {\n                    position: absolute;\n                    bottom: 8px;\n                    right: 0;\n                    color: @red;\n                    font-size: @font-small;\n                }\n            }\n            .amount-input {\n                position: relative;\n                border-left: none;\n                &.cursor {\n                    border-left: 1px solid @main-theme-color;\n                }\n                &:before {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    content: '￥';\n                    display: inline-block;\n                    color: @text-color;\n                    font-size: @font-hugest;\n                }\n            }\n        }\n\n        &-title {\n            color: #fff;\n            font-weight: 400;\n            font-size: @font-largest;\n        }\n    }\n\n    .cashier-input {\n        &-unit {\n            font-size: @font-hugeMore;\n            color: @text-color;\n        }\n        .amount-input {\n            font-size: 36px;\n        }\n    }\n</style>\n"]}]}