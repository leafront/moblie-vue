{"remainingRequest":"/Users/shanliguo/Documents/wm-mobile/mobile-vue/node_modules/babel-loader/lib/index.js!/Users/shanliguo/Documents/wm-mobile/mobile-vue/node_modules/eslint-loader/index.js??ref--13-0!/Users/shanliguo/Documents/wm-mobile/mobile-vue/src/libs/RSA.js","dependencies":[{"path":"/Users/shanliguo/Documents/wm-mobile/mobile-vue/src/libs/RSA.js","mtime":1551358888539},{"path":"/Users/shanliguo/Documents/wm-mobile/mobile-vue/node_modules/cache-loader/dist/cjs.js","mtime":1551093967131},{"path":"/Users/shanliguo/Documents/wm-mobile/mobile-vue/node_modules/babel-loader/lib/index.js","mtime":1551093966843},{"path":"/Users/shanliguo/Documents/wm-mobile/mobile-vue/node_modules/eslint-loader/index.js","mtime":1551093968958}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.number.constructor\";\nvar $w = window;\nif (typeof $w.RSAUtils === 'undefined') var RSAUtils = $w.RSAUtils = {};\nvar biRadixBase = 2;\nvar biRadixBits = 16;\nvar bitsPerDigit = biRadixBits;\nvar biRadix = 1 << 16; // = 2^16 = 65536\n\nvar biHalfRadix = biRadix >>> 1;\nvar biRadixSquared = biRadix * biRadix;\nvar maxDigitVal = biRadix - 1;\nvar maxInteger = 9999999999999998; //maxDigits:\n//Change this to accommodate your largest number size. Use setMaxDigits()\n//to change it!\n//\n//In general, if you're working with numbers of size N bits, you'll need 2*N\n//bits of storage. Each digit holds 16 bits. So, a 1024-bit key will need\n//\n//1024 * 2 / 16 = 128 digits of storage.\n//\n\nvar maxDigits;\nvar ZERO_ARRAY;\nvar bigZero, bigOne;\n\nvar BigInt = $w.BigInt = function (flag) {\n  if (typeof flag == \"boolean\" && flag == true) {\n    this.digits = null;\n  } else {\n    this.digits = ZERO_ARRAY.slice(0);\n  }\n\n  this.isNeg = false;\n};\n\nRSAUtils.setMaxDigits = function (value) {\n  maxDigits = value;\n  ZERO_ARRAY = new Array(maxDigits);\n\n  for (var iza = 0; iza < ZERO_ARRAY.length; iza++) {\n    ZERO_ARRAY[iza] = 0;\n  }\n\n  bigZero = new BigInt();\n  bigOne = new BigInt();\n  bigOne.digits[0] = 1;\n};\n\nRSAUtils.setMaxDigits(20); //The maximum number of digits in base 10 you can convert to an\n//integer without JavaScript throwing up on you.\n\nvar dpl10 = 15;\n\nRSAUtils.biFromNumber = function (i) {\n  var result = new BigInt();\n  result.isNeg = i < 0;\n  i = Math.abs(i);\n  var j = 0;\n\n  while (i > 0) {\n    result.digits[j++] = i & maxDigitVal;\n    i = Math.floor(i / biRadix);\n  }\n\n  return result;\n}; //lr10 = 10 ^ dpl10\n\n\nvar lr10 = RSAUtils.biFromNumber(1000000000000000);\n\nRSAUtils.biFromDecimal = function (s) {\n  var isNeg = s.charAt(0) == '-';\n  var i = isNeg ? 1 : 0;\n  var result; // Skip leading zeros.\n\n  while (i < s.length && s.charAt(i) == '0') {\n    ++i;\n  }\n\n  if (i == s.length) {\n    result = new BigInt();\n  } else {\n    var digitCount = s.length - i;\n    var fgl = digitCount % dpl10;\n    if (fgl == 0) fgl = dpl10;\n    result = RSAUtils.biFromNumber(Number(s.substr(i, fgl)));\n    i += fgl;\n\n    while (i < s.length) {\n      result = RSAUtils.biAdd(RSAUtils.biMultiply(result, lr10), RSAUtils.biFromNumber(Number(s.substr(i, dpl10))));\n      i += dpl10;\n    }\n\n    result.isNeg = isNeg;\n  }\n\n  return result;\n};\n\nRSAUtils.biCopy = function (bi) {\n  var result = new BigInt(true);\n  result.digits = bi.digits.slice(0);\n  result.isNeg = bi.isNeg;\n  return result;\n};\n\nRSAUtils.reverseStr = function (s) {\n  var result = \"\";\n\n  for (var i = s.length - 1; i > -1; --i) {\n    result += s.charAt(i);\n  }\n\n  return result;\n};\n\nvar hexatrigesimalToChar = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n\nRSAUtils.biToString = function (x, radix) {\n  // 2 <= radix <= 36\n  var b = new BigInt();\n  b.digits[0] = radix;\n  var qr = RSAUtils.biDivideModulo(x, b);\n  var result = hexatrigesimalToChar[qr[1].digits[0]];\n\n  while (RSAUtils.biCompare(qr[0], bigZero) == 1) {\n    qr = RSAUtils.biDivideModulo(qr[0], b);\n    digit = qr[1].digits[0];\n    result += hexatrigesimalToChar[qr[1].digits[0]];\n  }\n\n  return (x.isNeg ? \"-\" : \"\") + RSAUtils.reverseStr(result);\n};\n\nRSAUtils.biToDecimal = function (x) {\n  var b = new BigInt();\n  b.digits[0] = 10;\n  var qr = RSAUtils.biDivideModulo(x, b);\n  var result = String(qr[1].digits[0]);\n\n  while (RSAUtils.biCompare(qr[0], bigZero) == 1) {\n    qr = RSAUtils.biDivideModulo(qr[0], b);\n    result += String(qr[1].digits[0]);\n  }\n\n  return (x.isNeg ? \"-\" : \"\") + RSAUtils.reverseStr(result);\n};\n\nvar hexToChar = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n\nRSAUtils.digitToHex = function (n) {\n  var mask = 0xf;\n  var result = \"\";\n\n  for (var i = 0; i < 4; ++i) {\n    result += hexToChar[n & mask];\n    n >>>= 4;\n  }\n\n  return RSAUtils.reverseStr(result);\n};\n\nRSAUtils.biToHex = function (x) {\n  var result = \"\";\n  var n = RSAUtils.biHighIndex(x);\n\n  for (var i = RSAUtils.biHighIndex(x); i > -1; --i) {\n    result += RSAUtils.digitToHex(x.digits[i]);\n  }\n\n  return result;\n};\n\nRSAUtils.charToHex = function (c) {\n  var ZERO = 48;\n  var NINE = ZERO + 9;\n  var littleA = 97;\n  var littleZ = littleA + 25;\n  var bigA = 65;\n  var bigZ = 65 + 25;\n  var result;\n\n  if (c >= ZERO && c <= NINE) {\n    result = c - ZERO;\n  } else if (c >= bigA && c <= bigZ) {\n    result = 10 + c - bigA;\n  } else if (c >= littleA && c <= littleZ) {\n    result = 10 + c - littleA;\n  } else {\n    result = 0;\n  }\n\n  return result;\n};\n\nRSAUtils.hexToDigit = function (s) {\n  var result = 0;\n  var sl = Math.min(s.length, 4);\n\n  for (var i = 0; i < sl; ++i) {\n    result <<= 4;\n    result |= RSAUtils.charToHex(s.charCodeAt(i));\n  }\n\n  return result;\n};\n\nRSAUtils.biFromHex = function (s) {\n  var result = new BigInt();\n  var sl = s.length;\n\n  for (var i = sl, j = 0; i > 0; i -= 4, ++j) {\n    result.digits[j] = RSAUtils.hexToDigit(s.substr(Math.max(i - 4, 0), Math.min(i, 4)));\n  }\n\n  return result;\n};\n\nRSAUtils.biFromString = function (s, radix) {\n  var isNeg = s.charAt(0) == '-';\n  var istop = isNeg ? 1 : 0;\n  var result = new BigInt();\n  var place = new BigInt();\n  place.digits[0] = 1; // radix^0\n\n  for (var i = s.length - 1; i >= istop; i--) {\n    var c = s.charCodeAt(i);\n    var digit = RSAUtils.charToHex(c);\n    var biDigit = RSAUtils.biMultiplyDigit(place, digit);\n    result = RSAUtils.biAdd(result, biDigit);\n    place = RSAUtils.biMultiplyDigit(place, radix);\n  }\n\n  result.isNeg = isNeg;\n  return result;\n};\n\nRSAUtils.biDump = function (b) {\n  return (b.isNeg ? \"-\" : \"\") + b.digits.join(\" \");\n};\n\nRSAUtils.biAdd = function (x, y) {\n  var result;\n\n  if (x.isNeg != y.isNeg) {\n    y.isNeg = !y.isNeg;\n    result = RSAUtils.biSubtract(x, y);\n    y.isNeg = !y.isNeg;\n  } else {\n    result = new BigInt();\n    var c = 0;\n    var n;\n\n    for (var i = 0; i < x.digits.length; ++i) {\n      n = x.digits[i] + y.digits[i] + c;\n      result.digits[i] = n % biRadix;\n      c = Number(n >= biRadix);\n    }\n\n    result.isNeg = x.isNeg;\n  }\n\n  return result;\n};\n\nRSAUtils.biSubtract = function (x, y) {\n  var result;\n\n  if (x.isNeg != y.isNeg) {\n    y.isNeg = !y.isNeg;\n    result = RSAUtils.biAdd(x, y);\n    y.isNeg = !y.isNeg;\n  } else {\n    result = new BigInt();\n    var n, c;\n    c = 0;\n\n    for (var i = 0; i < x.digits.length; ++i) {\n      n = x.digits[i] - y.digits[i] + c;\n      result.digits[i] = n % biRadix; // Stupid non-conforming modulus operation.\n\n      if (result.digits[i] < 0) result.digits[i] += biRadix;\n      c = 0 - Number(n < 0);\n    } // Fix up the negative sign, if any.\n\n\n    if (c == -1) {\n      c = 0;\n\n      for (var i = 0; i < x.digits.length; ++i) {\n        n = 0 - result.digits[i] + c;\n        result.digits[i] = n % biRadix; // Stupid non-conforming modulus operation.\n\n        if (result.digits[i] < 0) result.digits[i] += biRadix;\n        c = 0 - Number(n < 0);\n      } // Result is opposite sign of arguments.\n\n\n      result.isNeg = !x.isNeg;\n    } else {\n      // Result is same sign.\n      result.isNeg = x.isNeg;\n    }\n  }\n\n  return result;\n};\n\nRSAUtils.biHighIndex = function (x) {\n  var result = x.digits.length - 1;\n\n  while (result > 0 && x.digits[result] == 0) {\n    --result;\n  }\n\n  return result;\n};\n\nRSAUtils.biNumBits = function (x) {\n  var n = RSAUtils.biHighIndex(x);\n  var d = x.digits[n];\n  var m = (n + 1) * bitsPerDigit;\n  var result;\n\n  for (result = m; result > m - bitsPerDigit; --result) {\n    if ((d & 0x8000) != 0) break;\n    d <<= 1;\n  }\n\n  return result;\n};\n\nRSAUtils.biMultiply = function (x, y) {\n  var result = new BigInt();\n  var c;\n  var n = RSAUtils.biHighIndex(x);\n  var t = RSAUtils.biHighIndex(y);\n  var u, uv, k;\n\n  for (var i = 0; i <= t; ++i) {\n    c = 0;\n    k = i;\n\n    for (var j = 0; j <= n; ++j, ++k) {\n      uv = result.digits[k] + x.digits[j] * y.digits[i] + c;\n      result.digits[k] = uv & maxDigitVal;\n      c = uv >>> biRadixBits; //c = Math.floor(uv / biRadix);\n    }\n\n    result.digits[i + n + 1] = c;\n  } // Someone give me a logical xor, please.\n\n\n  result.isNeg = x.isNeg != y.isNeg;\n  return result;\n};\n\nRSAUtils.biMultiplyDigit = function (x, y) {\n  var n, c, uv;\n  var result = new BigInt();\n  n = RSAUtils.biHighIndex(x);\n  c = 0;\n\n  for (var j = 0; j <= n; ++j) {\n    uv = result.digits[j] + x.digits[j] * y + c;\n    result.digits[j] = uv & maxDigitVal;\n    c = uv >>> biRadixBits; //c = Math.floor(uv / biRadix);\n  }\n\n  result.digits[1 + n] = c;\n  return result;\n};\n\nRSAUtils.arrayCopy = function (src, srcStart, dest, destStart, n) {\n  var m = Math.min(srcStart + n, src.length);\n\n  for (var i = srcStart, j = destStart; i < m; ++i, ++j) {\n    dest[j] = src[i];\n  }\n};\n\nvar highBitMasks = [0x0000, 0x8000, 0xC000, 0xE000, 0xF000, 0xF800, 0xFC00, 0xFE00, 0xFF00, 0xFF80, 0xFFC0, 0xFFE0, 0xFFF0, 0xFFF8, 0xFFFC, 0xFFFE, 0xFFFF];\n\nRSAUtils.biShiftLeft = function (x, n) {\n  var digitCount = Math.floor(n / bitsPerDigit);\n  var result = new BigInt();\n  RSAUtils.arrayCopy(x.digits, 0, result.digits, digitCount, result.digits.length - digitCount);\n  var bits = n % bitsPerDigit;\n  var rightBits = bitsPerDigit - bits;\n\n  for (var i = result.digits.length - 1, i1 = i - 1; i > 0; --i, --i1) {\n    result.digits[i] = result.digits[i] << bits & maxDigitVal | (result.digits[i1] & highBitMasks[bits]) >>> rightBits;\n  }\n\n  result.digits[0] = result.digits[i] << bits & maxDigitVal;\n  result.isNeg = x.isNeg;\n  return result;\n};\n\nvar lowBitMasks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nRSAUtils.biShiftRight = function (x, n) {\n  var digitCount = Math.floor(n / bitsPerDigit);\n  var result = new BigInt();\n  RSAUtils.arrayCopy(x.digits, digitCount, result.digits, 0, x.digits.length - digitCount);\n  var bits = n % bitsPerDigit;\n  var leftBits = bitsPerDigit - bits;\n\n  for (var i = 0, i1 = i + 1; i < result.digits.length - 1; ++i, ++i1) {\n    result.digits[i] = result.digits[i] >>> bits | (result.digits[i1] & lowBitMasks[bits]) << leftBits;\n  }\n\n  result.digits[result.digits.length - 1] >>>= bits;\n  result.isNeg = x.isNeg;\n  return result;\n};\n\nRSAUtils.biMultiplyByRadixPower = function (x, n) {\n  var result = new BigInt();\n  RSAUtils.arrayCopy(x.digits, 0, result.digits, n, result.digits.length - n);\n  return result;\n};\n\nRSAUtils.biDivideByRadixPower = function (x, n) {\n  var result = new BigInt();\n  RSAUtils.arrayCopy(x.digits, n, result.digits, 0, result.digits.length - n);\n  return result;\n};\n\nRSAUtils.biModuloByRadixPower = function (x, n) {\n  var result = new BigInt();\n  RSAUtils.arrayCopy(x.digits, 0, result.digits, 0, n);\n  return result;\n};\n\nRSAUtils.biCompare = function (x, y) {\n  if (x.isNeg != y.isNeg) {\n    return 1 - 2 * Number(x.isNeg);\n  }\n\n  for (var i = x.digits.length - 1; i >= 0; --i) {\n    if (x.digits[i] != y.digits[i]) {\n      if (x.isNeg) {\n        return 1 - 2 * Number(x.digits[i] > y.digits[i]);\n      } else {\n        return 1 - 2 * Number(x.digits[i] < y.digits[i]);\n      }\n    }\n  }\n\n  return 0;\n};\n\nRSAUtils.biDivideModulo = function (x, y) {\n  var nb = RSAUtils.biNumBits(x);\n  var tb = RSAUtils.biNumBits(y);\n  var origYIsNeg = y.isNeg;\n  var q, r;\n\n  if (nb < tb) {\n    // |x| < |y|\n    if (x.isNeg) {\n      q = RSAUtils.biCopy(bigOne);\n      q.isNeg = !y.isNeg;\n      x.isNeg = false;\n      y.isNeg = false;\n      r = biSubtract(y, x); // Restore signs, 'cause they're references.\n\n      x.isNeg = true;\n      y.isNeg = origYIsNeg;\n    } else {\n      q = new BigInt();\n      r = RSAUtils.biCopy(x);\n    }\n\n    return [q, r];\n  }\n\n  q = new BigInt();\n  r = x; // Normalize Y.\n\n  var t = Math.ceil(tb / bitsPerDigit) - 1;\n  var lambda = 0;\n\n  while (y.digits[t] < biHalfRadix) {\n    y = RSAUtils.biShiftLeft(y, 1);\n    ++lambda;\n    ++tb;\n    t = Math.ceil(tb / bitsPerDigit) - 1;\n  } // Shift r over to keep the quotient constant. We'll shift the\n  // remainder back at the end.\n\n\n  r = RSAUtils.biShiftLeft(r, lambda);\n  nb += lambda; // Update the bit count for x.\n\n  var n = Math.ceil(nb / bitsPerDigit) - 1;\n  var b = RSAUtils.biMultiplyByRadixPower(y, n - t);\n\n  while (RSAUtils.biCompare(r, b) != -1) {\n    ++q.digits[n - t];\n    r = RSAUtils.biSubtract(r, b);\n  }\n\n  for (var i = n; i > t; --i) {\n    var ri = i >= r.digits.length ? 0 : r.digits[i];\n    var ri1 = i - 1 >= r.digits.length ? 0 : r.digits[i - 1];\n    var ri2 = i - 2 >= r.digits.length ? 0 : r.digits[i - 2];\n    var yt = t >= y.digits.length ? 0 : y.digits[t];\n    var yt1 = t - 1 >= y.digits.length ? 0 : y.digits[t - 1];\n\n    if (ri == yt) {\n      q.digits[i - t - 1] = maxDigitVal;\n    } else {\n      q.digits[i - t - 1] = Math.floor((ri * biRadix + ri1) / yt);\n    }\n\n    var c1 = q.digits[i - t - 1] * (yt * biRadix + yt1);\n    var c2 = ri * biRadixSquared + (ri1 * biRadix + ri2);\n\n    while (c1 > c2) {\n      --q.digits[i - t - 1];\n      c1 = q.digits[i - t - 1] * (yt * biRadix | yt1);\n      c2 = ri * biRadix * biRadix + (ri1 * biRadix + ri2);\n    }\n\n    b = RSAUtils.biMultiplyByRadixPower(y, i - t - 1);\n    r = RSAUtils.biSubtract(r, RSAUtils.biMultiplyDigit(b, q.digits[i - t - 1]));\n\n    if (r.isNeg) {\n      r = RSAUtils.biAdd(r, b);\n      --q.digits[i - t - 1];\n    }\n  }\n\n  r = RSAUtils.biShiftRight(r, lambda); // Fiddle with the signs and stuff to make sure that 0 <= r < y.\n\n  q.isNeg = x.isNeg != origYIsNeg;\n\n  if (x.isNeg) {\n    if (origYIsNeg) {\n      q = RSAUtils.biAdd(q, bigOne);\n    } else {\n      q = RSAUtils.biSubtract(q, bigOne);\n    }\n\n    y = RSAUtils.biShiftRight(y, lambda);\n    r = RSAUtils.biSubtract(y, r);\n  } // Check for the unbelievably stupid degenerate case of r == -0.\n\n\n  if (r.digits[0] == 0 && RSAUtils.biHighIndex(r) == 0) r.isNeg = false;\n  return [q, r];\n};\n\nRSAUtils.biDivide = function (x, y) {\n  return RSAUtils.biDivideModulo(x, y)[0];\n};\n\nRSAUtils.biModulo = function (x, y) {\n  return RSAUtils.biDivideModulo(x, y)[1];\n};\n\nRSAUtils.biMultiplyMod = function (x, y, m) {\n  return RSAUtils.biModulo(RSAUtils.biMultiply(x, y), m);\n};\n\nRSAUtils.biPow = function (x, y) {\n  var result = bigOne;\n  var a = x;\n\n  while (true) {\n    if ((y & 1) != 0) result = RSAUtils.biMultiply(result, a);\n    y >>= 1;\n    if (y == 0) break;\n    a = RSAUtils.biMultiply(a, a);\n  }\n\n  return result;\n};\n\nRSAUtils.biPowMod = function (x, y, m) {\n  var result = bigOne;\n  var a = x;\n  var k = y;\n\n  while (true) {\n    if ((k.digits[0] & 1) != 0) result = RSAUtils.biMultiplyMod(result, a, m);\n    k = RSAUtils.biShiftRight(k, 1);\n    if (k.digits[0] == 0 && RSAUtils.biHighIndex(k) == 0) break;\n    a = RSAUtils.biMultiplyMod(a, a, m);\n  }\n\n  return result;\n};\n\n$w.BarrettMu = function (m) {\n  this.modulus = RSAUtils.biCopy(m);\n  this.k = RSAUtils.biHighIndex(this.modulus) + 1;\n  var b2k = new BigInt();\n  b2k.digits[2 * this.k] = 1; // b2k = b^(2k)\n\n  this.mu = RSAUtils.biDivide(b2k, this.modulus);\n  this.bkplus1 = new BigInt();\n  this.bkplus1.digits[this.k + 1] = 1; // bkplus1 = b^(k+1)\n\n  this.modulo = BarrettMu_modulo;\n  this.multiplyMod = BarrettMu_multiplyMod;\n  this.powMod = BarrettMu_powMod;\n};\n\nfunction BarrettMu_modulo(x) {\n  var $dmath = RSAUtils;\n  var q1 = $dmath.biDivideByRadixPower(x, this.k - 1);\n  var q2 = $dmath.biMultiply(q1, this.mu);\n  var q3 = $dmath.biDivideByRadixPower(q2, this.k + 1);\n  var r1 = $dmath.biModuloByRadixPower(x, this.k + 1);\n  var r2term = $dmath.biMultiply(q3, this.modulus);\n  var r2 = $dmath.biModuloByRadixPower(r2term, this.k + 1);\n  var r = $dmath.biSubtract(r1, r2);\n\n  if (r.isNeg) {\n    r = $dmath.biAdd(r, this.bkplus1);\n  }\n\n  var rgtem = $dmath.biCompare(r, this.modulus) >= 0;\n\n  while (rgtem) {\n    r = $dmath.biSubtract(r, this.modulus);\n    rgtem = $dmath.biCompare(r, this.modulus) >= 0;\n  }\n\n  return r;\n}\n\nfunction BarrettMu_multiplyMod(x, y) {\n  /*\n   x = this.modulo(x);\n   y = this.modulo(y);\n   */\n  var xy = RSAUtils.biMultiply(x, y);\n  return this.modulo(xy);\n}\n\nfunction BarrettMu_powMod(x, y) {\n  var result = new BigInt();\n  result.digits[0] = 1;\n  var a = x;\n  var k = y;\n\n  while (true) {\n    if ((k.digits[0] & 1) != 0) result = this.multiplyMod(result, a);\n    k = RSAUtils.biShiftRight(k, 1);\n    if (k.digits[0] == 0 && RSAUtils.biHighIndex(k) == 0) break;\n    a = this.multiplyMod(a, a);\n  }\n\n  return result;\n}\n\nvar RSAKeyPair = function RSAKeyPair(encryptionExponent, decryptionExponent, modulus) {\n  var $dmath = RSAUtils;\n  this.e = $dmath.biFromHex(encryptionExponent);\n  this.d = $dmath.biFromHex(decryptionExponent);\n  this.m = $dmath.biFromHex(modulus); // We can do two bytes per digit, so\n  // chunkSize = 2 * (number of digits in modulus - 1).\n  // Since biHighIndex returns the high index, not the number of digits, 1 has\n  // already been subtracted.\n\n  this.chunkSize = 2 * $dmath.biHighIndex(this.m);\n  this.radix = 16;\n  this.barrett = new $w.BarrettMu(this.m);\n};\n\nRSAUtils.getKeyPair = function (encryptionExponent, decryptionExponent, modulus) {\n  return new RSAKeyPair(encryptionExponent, decryptionExponent, modulus);\n};\n\nif (typeof $w.twoDigit === 'undefined') {\n  $w.twoDigit = function (n) {\n    return (n < 10 ? \"0\" : \"\") + String(n);\n  };\n} // Altered by Rob Saunders (rob@robsaunders.net). New routine pads the\n// string after it has been converted to an array. This fixes an\n// incompatibility with Flash MX's ActionScript.\n\n\nRSAUtils.encryptedString = function (key, s) {\n  var a = [];\n  var sl = s.length;\n  var i = 0;\n\n  while (i < sl) {\n    a[i] = s.charCodeAt(i);\n    i++;\n  }\n\n  while (a.length % key.chunkSize != 0) {\n    a[i++] = 0;\n  }\n\n  var al = a.length;\n  var result = \"\";\n  var j, k, block;\n\n  for (i = 0; i < al; i += key.chunkSize) {\n    block = new BigInt();\n    j = 0;\n\n    for (k = i; k < i + key.chunkSize; ++j) {\n      block.digits[j] = a[k++];\n      block.digits[j] += a[k++] << 8;\n    }\n\n    var crypt = key.barrett.powMod(block, key.e);\n    var text = key.radix == 16 ? RSAUtils.biToHex(crypt) : RSAUtils.biToString(crypt, key.radix);\n    result += text + \" \";\n  }\n\n  return result.substring(0, result.length - 1); // Remove last space.\n};\n\nRSAUtils.decryptedString = function (key, s) {\n  var blocks = s.split(\" \");\n  var result = \"\";\n  var i, j, block;\n\n  for (i = 0; i < blocks.length; ++i) {\n    var bi;\n\n    if (key.radix == 16) {\n      bi = RSAUtils.biFromHex(blocks[i]);\n    } else {\n      bi = RSAUtils.biFromString(blocks[i], key.radix);\n    }\n\n    block = key.barrett.powMod(bi, key.d);\n\n    for (j = 0; j <= RSAUtils.biHighIndex(block); ++j) {\n      result += String.fromCharCode(block.digits[j] & 255, block.digits[j] >> 8);\n    }\n  } // Remove trailing null, if any.\n\n\n  if (result.charCodeAt(result.length - 1) == 0) {\n    result = result.substring(0, result.length - 1);\n  }\n\n  return result;\n};\n\nRSAUtils.setMaxDigits(130);\nexport default RSAUtils;",{"version":3,"sources":["/Users/shanliguo/Documents/wm-mobile/mobile-vue/src/libs/RSA.js"],"names":["$w","window","RSAUtils","biRadixBase","biRadixBits","bitsPerDigit","biRadix","biHalfRadix","biRadixSquared","maxDigitVal","maxInteger","maxDigits","ZERO_ARRAY","bigZero","bigOne","BigInt","flag","digits","slice","isNeg","setMaxDigits","value","Array","iza","length","dpl10","biFromNumber","i","result","Math","abs","j","floor","lr10","biFromDecimal","s","charAt","digitCount","fgl","Number","substr","biAdd","biMultiply","biCopy","bi","reverseStr","hexatrigesimalToChar","biToString","x","radix","b","qr","biDivideModulo","biCompare","digit","biToDecimal","String","hexToChar","digitToHex","n","mask","biToHex","biHighIndex","charToHex","c","ZERO","NINE","littleA","littleZ","bigA","bigZ","hexToDigit","sl","min","charCodeAt","biFromHex","max","biFromString","istop","place","biDigit","biMultiplyDigit","biDump","join","y","biSubtract","biNumBits","d","m","t","u","uv","k","arrayCopy","src","srcStart","dest","destStart","highBitMasks","biShiftLeft","bits","rightBits","i1","lowBitMasks","biShiftRight","leftBits","biMultiplyByRadixPower","biDivideByRadixPower","biModuloByRadixPower","nb","tb","origYIsNeg","q","r","ceil","lambda","ri","ri1","ri2","yt","yt1","c1","c2","biDivide","biModulo","biMultiplyMod","biPow","a","biPowMod","BarrettMu","modulus","b2k","mu","bkplus1","modulo","BarrettMu_modulo","multiplyMod","BarrettMu_multiplyMod","powMod","BarrettMu_powMod","$dmath","q1","q2","q3","r1","r2term","r2","rgtem","xy","RSAKeyPair","encryptionExponent","decryptionExponent","e","chunkSize","barrett","getKeyPair","twoDigit","encryptedString","key","al","block","crypt","text","substring","decryptedString","blocks","split","fromCharCode"],"mappings":"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","sourcesContent":["var $w=window;\nif(typeof $w.RSAUtils === 'undefined')\n    var RSAUtils = $w.RSAUtils = {};\nvar biRadixBase = 2;\nvar biRadixBits = 16;\nvar bitsPerDigit = biRadixBits;\nvar biRadix = 1 << 16; // = 2^16 = 65536\nvar biHalfRadix = biRadix >>> 1;\nvar biRadixSquared = biRadix * biRadix;\nvar maxDigitVal = biRadix - 1;\nvar maxInteger = 9999999999999998;\n\n//maxDigits:\n//Change this to accommodate your largest number size. Use setMaxDigits()\n//to change it!\n//\n//In general, if you're working with numbers of size N bits, you'll need 2*N\n//bits of storage. Each digit holds 16 bits. So, a 1024-bit key will need\n//\n//1024 * 2 / 16 = 128 digits of storage.\n//\nvar maxDigits;\nvar ZERO_ARRAY;\nvar bigZero, bigOne;\n\nvar BigInt = $w.BigInt = function(flag) {\n    if (typeof flag == \"boolean\" && flag == true) {\n        this.digits = null;\n    } else {\n        this.digits = ZERO_ARRAY.slice(0);\n    }\n    this.isNeg = false;\n};\n\nRSAUtils.setMaxDigits = function(value) {\n    maxDigits = value;\n    ZERO_ARRAY = new Array(maxDigits);\n    for (var iza = 0; iza < ZERO_ARRAY.length; iza++) ZERO_ARRAY[iza] = 0;\n    bigZero = new BigInt();\n    bigOne = new BigInt();\n    bigOne.digits[0] = 1;\n};\nRSAUtils.setMaxDigits(20);\n\n//The maximum number of digits in base 10 you can convert to an\n//integer without JavaScript throwing up on you.\nvar dpl10 = 15;\n\nRSAUtils.biFromNumber = function(i) {\n    var result = new BigInt();\n    result.isNeg = i < 0;\n    i = Math.abs(i);\n    var j = 0;\n    while (i > 0) {\n        result.digits[j++] = i & maxDigitVal;\n        i = Math.floor(i / biRadix);\n    }\n    return result;\n};\n\n//lr10 = 10 ^ dpl10\nvar lr10 = RSAUtils.biFromNumber(1000000000000000);\n\nRSAUtils.biFromDecimal = function(s) {\n    var isNeg = s.charAt(0) == '-';\n    var i = isNeg ? 1 : 0;\n    var result;\n    // Skip leading zeros.\n    while (i < s.length && s.charAt(i) == '0') ++i;\n    if (i == s.length) {\n        result = new BigInt();\n    }\n    else {\n        var digitCount = s.length - i;\n        var fgl = digitCount % dpl10;\n        if (fgl == 0) fgl = dpl10;\n        result = RSAUtils.biFromNumber(Number(s.substr(i, fgl)));\n        i += fgl;\n        while (i < s.length) {\n            result = RSAUtils.biAdd(RSAUtils.biMultiply(result, lr10),\n                RSAUtils.biFromNumber(Number(s.substr(i, dpl10))));\n            i += dpl10;\n        }\n        result.isNeg = isNeg;\n    }\n    return result;\n};\n\nRSAUtils.biCopy = function(bi) {\n    var result = new BigInt(true);\n    result.digits = bi.digits.slice(0);\n    result.isNeg = bi.isNeg;\n    return result;\n};\n\nRSAUtils.reverseStr = function(s) {\n    var result = \"\";\n    for (var i = s.length - 1; i > -1; --i) {\n        result += s.charAt(i);\n    }\n    return result;\n};\n\nvar hexatrigesimalToChar = [\n    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z'\n];\n\nRSAUtils.biToString = function(x, radix) { // 2 <= radix <= 36\n    var b = new BigInt();\n    b.digits[0] = radix;\n    var qr = RSAUtils.biDivideModulo(x, b);\n    var result = hexatrigesimalToChar[qr[1].digits[0]];\n    while (RSAUtils.biCompare(qr[0], bigZero) == 1) {\n        qr = RSAUtils.biDivideModulo(qr[0], b);\n        digit = qr[1].digits[0];\n        result += hexatrigesimalToChar[qr[1].digits[0]];\n    }\n    return (x.isNeg ? \"-\" : \"\") + RSAUtils.reverseStr(result);\n};\n\nRSAUtils.biToDecimal = function(x) {\n    var b = new BigInt();\n    b.digits[0] = 10;\n    var qr = RSAUtils.biDivideModulo(x, b);\n    var result = String(qr[1].digits[0]);\n    while (RSAUtils.biCompare(qr[0], bigZero) == 1) {\n        qr = RSAUtils.biDivideModulo(qr[0], b);\n        result += String(qr[1].digits[0]);\n    }\n    return (x.isNeg ? \"-\" : \"\") + RSAUtils.reverseStr(result);\n};\n\nvar hexToChar = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n    'a', 'b', 'c', 'd', 'e', 'f'];\n\nRSAUtils.digitToHex = function(n) {\n    var mask = 0xf;\n    var result = \"\";\n    for (var i = 0; i < 4; ++i) {\n        result += hexToChar[n & mask];\n        n >>>= 4;\n    }\n    return RSAUtils.reverseStr(result);\n};\n\nRSAUtils.biToHex = function(x) {\n    var result = \"\";\n    var n = RSAUtils.biHighIndex(x);\n    for (var i = RSAUtils.biHighIndex(x); i > -1; --i) {\n        result += RSAUtils.digitToHex(x.digits[i]);\n    }\n    return result;\n};\n\nRSAUtils.charToHex = function(c) {\n    var ZERO = 48;\n    var NINE = ZERO + 9;\n    var littleA = 97;\n    var littleZ = littleA + 25;\n    var bigA = 65;\n    var bigZ = 65 + 25;\n    var result;\n\n    if (c >= ZERO && c <= NINE) {\n        result = c - ZERO;\n    } else if (c >= bigA && c <= bigZ) {\n        result = 10 + c - bigA;\n    } else if (c >= littleA && c <= littleZ) {\n        result = 10 + c - littleA;\n    } else {\n        result = 0;\n    }\n    return result;\n};\n\nRSAUtils.hexToDigit = function(s) {\n    var result = 0;\n    var sl = Math.min(s.length, 4);\n    for (var i = 0; i < sl; ++i) {\n        result <<= 4;\n        result |= RSAUtils.charToHex(s.charCodeAt(i));\n    }\n    return result;\n};\n\nRSAUtils.biFromHex = function(s) {\n    var result = new BigInt();\n    var sl = s.length;\n    for (var i = sl, j = 0; i > 0; i -= 4, ++j) {\n        result.digits[j] = RSAUtils.hexToDigit(s.substr(Math.max(i - 4, 0), Math.min(i, 4)));\n    }\n    return result;\n};\n\nRSAUtils.biFromString = function(s, radix) {\n    var isNeg = s.charAt(0) == '-';\n    var istop = isNeg ? 1 : 0;\n    var result = new BigInt();\n    var place = new BigInt();\n    place.digits[0] = 1; // radix^0\n    for (var i = s.length - 1; i >= istop; i--) {\n        var c = s.charCodeAt(i);\n        var digit = RSAUtils.charToHex(c);\n        var biDigit = RSAUtils.biMultiplyDigit(place, digit);\n        result = RSAUtils.biAdd(result, biDigit);\n        place = RSAUtils.biMultiplyDigit(place, radix);\n    }\n    result.isNeg = isNeg;\n    return result;\n};\n\nRSAUtils.biDump = function(b) {\n    return (b.isNeg ? \"-\" : \"\") + b.digits.join(\" \");\n};\n\nRSAUtils.biAdd = function(x, y) {\n    var result;\n\n    if (x.isNeg != y.isNeg) {\n        y.isNeg = !y.isNeg;\n        result = RSAUtils.biSubtract(x, y);\n        y.isNeg = !y.isNeg;\n    }\n    else {\n        result = new BigInt();\n        var c = 0;\n        var n;\n        for (var i = 0; i < x.digits.length; ++i) {\n            n = x.digits[i] + y.digits[i] + c;\n            result.digits[i] = n % biRadix;\n            c = Number(n >= biRadix);\n        }\n        result.isNeg = x.isNeg;\n    }\n    return result;\n};\n\nRSAUtils.biSubtract = function(x, y) {\n    var result;\n    if (x.isNeg != y.isNeg) {\n        y.isNeg = !y.isNeg;\n        result = RSAUtils.biAdd(x, y);\n        y.isNeg = !y.isNeg;\n    } else {\n        result = new BigInt();\n        var n, c;\n        c = 0;\n        for (var i = 0; i < x.digits.length; ++i) {\n            n = x.digits[i] - y.digits[i] + c;\n            result.digits[i] = n % biRadix;\n            // Stupid non-conforming modulus operation.\n            if (result.digits[i] < 0) result.digits[i] += biRadix;\n            c = 0 - Number(n < 0);\n        }\n        // Fix up the negative sign, if any.\n        if (c == -1) {\n            c = 0;\n            for (var i = 0; i < x.digits.length; ++i) {\n                n = 0 - result.digits[i] + c;\n                result.digits[i] = n % biRadix;\n                // Stupid non-conforming modulus operation.\n                if (result.digits[i] < 0) result.digits[i] += biRadix;\n                c = 0 - Number(n < 0);\n            }\n            // Result is opposite sign of arguments.\n            result.isNeg = !x.isNeg;\n        } else {\n            // Result is same sign.\n            result.isNeg = x.isNeg;\n        }\n    }\n    return result;\n};\n\nRSAUtils.biHighIndex = function(x) {\n    var result = x.digits.length - 1;\n    while (result > 0 && x.digits[result] == 0) --result;\n    return result;\n};\n\nRSAUtils.biNumBits = function(x) {\n    var n = RSAUtils.biHighIndex(x);\n    var d = x.digits[n];\n    var m = (n + 1) * bitsPerDigit;\n    var result;\n    for (result = m; result > m - bitsPerDigit; --result) {\n        if ((d & 0x8000) != 0) break;\n        d <<= 1;\n    }\n    return result;\n};\n\nRSAUtils.biMultiply = function(x, y) {\n    var result = new BigInt();\n    var c;\n    var n = RSAUtils.biHighIndex(x);\n    var t = RSAUtils.biHighIndex(y);\n    var u, uv, k;\n\n    for (var i = 0; i <= t; ++i) {\n        c = 0;\n        k = i;\n        for (var j = 0; j <= n; ++j, ++k) {\n            uv = result.digits[k] + x.digits[j] * y.digits[i] + c;\n            result.digits[k] = uv & maxDigitVal;\n            c = uv >>> biRadixBits;\n            //c = Math.floor(uv / biRadix);\n        }\n        result.digits[i + n + 1] = c;\n    }\n    // Someone give me a logical xor, please.\n    result.isNeg = x.isNeg != y.isNeg;\n    return result;\n};\n\nRSAUtils.biMultiplyDigit = function(x, y) {\n    var n, c, uv;\n\n    var result = new BigInt();\n    n = RSAUtils.biHighIndex(x);\n    c = 0;\n    for (var j = 0; j <= n; ++j) {\n        uv = result.digits[j] + x.digits[j] * y + c;\n        result.digits[j] = uv & maxDigitVal;\n        c = uv >>> biRadixBits;\n        //c = Math.floor(uv / biRadix);\n    }\n    result.digits[1 + n] = c;\n    return result;\n};\n\nRSAUtils.arrayCopy = function(src, srcStart, dest, destStart, n) {\n    var m = Math.min(srcStart + n, src.length);\n    for (var i = srcStart, j = destStart; i < m; ++i, ++j) {\n        dest[j] = src[i];\n    }\n};\n\nvar highBitMasks = [0x0000, 0x8000, 0xC000, 0xE000, 0xF000, 0xF800,\n    0xFC00, 0xFE00, 0xFF00, 0xFF80, 0xFFC0, 0xFFE0,\n    0xFFF0, 0xFFF8, 0xFFFC, 0xFFFE, 0xFFFF];\n\nRSAUtils.biShiftLeft = function(x, n) {\n    var digitCount = Math.floor(n / bitsPerDigit);\n    var result = new BigInt();\n    RSAUtils.arrayCopy(x.digits, 0, result.digits, digitCount,\n        result.digits.length - digitCount);\n    var bits = n % bitsPerDigit;\n    var rightBits = bitsPerDigit - bits;\n    for (var i = result.digits.length - 1, i1 = i - 1; i > 0; --i, --i1) {\n        result.digits[i] = ((result.digits[i] << bits) & maxDigitVal) |\n            ((result.digits[i1] & highBitMasks[bits]) >>>\n                (rightBits));\n    }\n    result.digits[0] = ((result.digits[i] << bits) & maxDigitVal);\n    result.isNeg = x.isNeg;\n    return result;\n};\n\nvar lowBitMasks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n    0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n    0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nRSAUtils.biShiftRight = function(x, n) {\n    var digitCount = Math.floor(n / bitsPerDigit);\n    var result = new BigInt();\n    RSAUtils.arrayCopy(x.digits, digitCount, result.digits, 0,\n        x.digits.length - digitCount);\n    var bits = n % bitsPerDigit;\n    var leftBits = bitsPerDigit - bits;\n    for (var i = 0, i1 = i + 1; i < result.digits.length - 1; ++i, ++i1) {\n        result.digits[i] = (result.digits[i] >>> bits) |\n            ((result.digits[i1] & lowBitMasks[bits]) << leftBits);\n    }\n    result.digits[result.digits.length - 1] >>>= bits;\n    result.isNeg = x.isNeg;\n    return result;\n};\n\nRSAUtils.biMultiplyByRadixPower = function(x, n) {\n    var result = new BigInt();\n    RSAUtils.arrayCopy(x.digits, 0, result.digits, n, result.digits.length - n);\n    return result;\n};\n\nRSAUtils.biDivideByRadixPower = function(x, n) {\n    var result = new BigInt();\n    RSAUtils.arrayCopy(x.digits, n, result.digits, 0, result.digits.length - n);\n    return result;\n};\n\nRSAUtils.biModuloByRadixPower = function(x, n) {\n    var result = new BigInt();\n    RSAUtils.arrayCopy(x.digits, 0, result.digits, 0, n);\n    return result;\n};\n\nRSAUtils.biCompare = function(x, y) {\n    if (x.isNeg != y.isNeg) {\n        return 1 - 2 * Number(x.isNeg);\n    }\n    for (var i = x.digits.length - 1; i >= 0; --i) {\n        if (x.digits[i] != y.digits[i]) {\n            if (x.isNeg) {\n                return 1 - 2 * Number(x.digits[i] > y.digits[i]);\n            } else {\n                return 1 - 2 * Number(x.digits[i] < y.digits[i]);\n            }\n        }\n    }\n    return 0;\n};\n\nRSAUtils.biDivideModulo = function(x, y) {\n    var nb = RSAUtils.biNumBits(x);\n    var tb = RSAUtils.biNumBits(y);\n    var origYIsNeg = y.isNeg;\n    var q, r;\n    if (nb < tb) {\n        // |x| < |y|\n        if (x.isNeg) {\n            q = RSAUtils.biCopy(bigOne);\n            q.isNeg = !y.isNeg;\n            x.isNeg = false;\n            y.isNeg = false;\n            r = biSubtract(y, x);\n            // Restore signs, 'cause they're references.\n            x.isNeg = true;\n            y.isNeg = origYIsNeg;\n        } else {\n            q = new BigInt();\n            r = RSAUtils.biCopy(x);\n        }\n        return [q, r];\n    }\n\n    q = new BigInt();\n    r = x;\n\n    // Normalize Y.\n    var t = Math.ceil(tb / bitsPerDigit) - 1;\n    var lambda = 0;\n    while (y.digits[t] < biHalfRadix) {\n        y = RSAUtils.biShiftLeft(y, 1);\n        ++lambda;\n        ++tb;\n        t = Math.ceil(tb / bitsPerDigit) - 1;\n    }\n    // Shift r over to keep the quotient constant. We'll shift the\n    // remainder back at the end.\n    r = RSAUtils.biShiftLeft(r, lambda);\n    nb += lambda; // Update the bit count for x.\n    var n = Math.ceil(nb / bitsPerDigit) - 1;\n\n    var b = RSAUtils.biMultiplyByRadixPower(y, n - t);\n    while (RSAUtils.biCompare(r, b) != -1) {\n        ++q.digits[n - t];\n        r = RSAUtils.biSubtract(r, b);\n    }\n    for (var i = n; i > t; --i) {\n        var ri = (i >= r.digits.length) ? 0 : r.digits[i];\n        var ri1 = (i - 1 >= r.digits.length) ? 0 : r.digits[i - 1];\n        var ri2 = (i - 2 >= r.digits.length) ? 0 : r.digits[i - 2];\n        var yt = (t >= y.digits.length) ? 0 : y.digits[t];\n        var yt1 = (t - 1 >= y.digits.length) ? 0 : y.digits[t - 1];\n        if (ri == yt) {\n            q.digits[i - t - 1] = maxDigitVal;\n        } else {\n            q.digits[i - t - 1] = Math.floor((ri * biRadix + ri1) / yt);\n        }\n\n        var c1 = q.digits[i - t - 1] * ((yt * biRadix) + yt1);\n        var c2 = (ri * biRadixSquared) + ((ri1 * biRadix) + ri2);\n        while (c1 > c2) {\n            --q.digits[i - t - 1];\n            c1 = q.digits[i - t - 1] * ((yt * biRadix) | yt1);\n            c2 = (ri * biRadix * biRadix) + ((ri1 * biRadix) + ri2);\n        }\n\n        b = RSAUtils.biMultiplyByRadixPower(y, i - t - 1);\n        r = RSAUtils.biSubtract(r, RSAUtils.biMultiplyDigit(b, q.digits[i - t - 1]));\n        if (r.isNeg) {\n            r = RSAUtils.biAdd(r, b);\n            --q.digits[i - t - 1];\n        }\n    }\n    r = RSAUtils.biShiftRight(r, lambda);\n    // Fiddle with the signs and stuff to make sure that 0 <= r < y.\n    q.isNeg = x.isNeg != origYIsNeg;\n    if (x.isNeg) {\n        if (origYIsNeg) {\n            q = RSAUtils.biAdd(q, bigOne);\n        } else {\n            q = RSAUtils.biSubtract(q, bigOne);\n        }\n        y = RSAUtils.biShiftRight(y, lambda);\n        r = RSAUtils.biSubtract(y, r);\n    }\n    // Check for the unbelievably stupid degenerate case of r == -0.\n    if (r.digits[0] == 0 && RSAUtils.biHighIndex(r) == 0) r.isNeg = false;\n\n    return [q, r];\n};\n\nRSAUtils.biDivide = function(x, y) {\n    return RSAUtils.biDivideModulo(x, y)[0];\n};\n\nRSAUtils.biModulo = function(x, y) {\n    return RSAUtils.biDivideModulo(x, y)[1];\n};\n\nRSAUtils.biMultiplyMod = function(x, y, m) {\n    return RSAUtils.biModulo(RSAUtils.biMultiply(x, y), m);\n};\n\nRSAUtils.biPow = function(x, y) {\n    var result = bigOne;\n    var a = x;\n    while (true) {\n        if ((y & 1) != 0) result = RSAUtils.biMultiply(result, a);\n        y >>= 1;\n        if (y == 0) break;\n        a = RSAUtils.biMultiply(a, a);\n    }\n    return result;\n};\n\nRSAUtils.biPowMod = function(x, y, m) {\n    var result = bigOne;\n    var a = x;\n    var k = y;\n    while (true) {\n        if ((k.digits[0] & 1) != 0) result = RSAUtils.biMultiplyMod(result, a, m);\n        k = RSAUtils.biShiftRight(k, 1);\n        if (k.digits[0] == 0 && RSAUtils.biHighIndex(k) == 0) break;\n        a = RSAUtils.biMultiplyMod(a, a, m);\n    }\n    return result;\n};\n\n\n$w.BarrettMu = function(m) {\n    this.modulus = RSAUtils.biCopy(m);\n    this.k = RSAUtils.biHighIndex(this.modulus) + 1;\n    var b2k = new BigInt();\n    b2k.digits[2 * this.k] = 1; // b2k = b^(2k)\n    this.mu = RSAUtils.biDivide(b2k, this.modulus);\n    this.bkplus1 = new BigInt();\n    this.bkplus1.digits[this.k + 1] = 1; // bkplus1 = b^(k+1)\n    this.modulo = BarrettMu_modulo;\n    this.multiplyMod = BarrettMu_multiplyMod;\n    this.powMod = BarrettMu_powMod;\n};\n\nfunction BarrettMu_modulo(x) {\n    var $dmath = RSAUtils;\n    var q1 = $dmath.biDivideByRadixPower(x, this.k - 1);\n    var q2 = $dmath.biMultiply(q1, this.mu);\n    var q3 = $dmath.biDivideByRadixPower(q2, this.k + 1);\n    var r1 = $dmath.biModuloByRadixPower(x, this.k + 1);\n    var r2term = $dmath.biMultiply(q3, this.modulus);\n    var r2 = $dmath.biModuloByRadixPower(r2term, this.k + 1);\n    var r = $dmath.biSubtract(r1, r2);\n    if (r.isNeg) {\n        r = $dmath.biAdd(r, this.bkplus1);\n    }\n    var rgtem = $dmath.biCompare(r, this.modulus) >= 0;\n    while (rgtem) {\n        r = $dmath.biSubtract(r, this.modulus);\n        rgtem = $dmath.biCompare(r, this.modulus) >= 0;\n    }\n    return r;\n}\n\nfunction BarrettMu_multiplyMod(x, y) {\n    /*\n     x = this.modulo(x);\n     y = this.modulo(y);\n     */\n    var xy = RSAUtils.biMultiply(x, y);\n    return this.modulo(xy);\n}\n\nfunction BarrettMu_powMod(x, y) {\n    var result = new BigInt();\n    result.digits[0] = 1;\n    var a = x;\n    var k = y;\n    while (true) {\n        if ((k.digits[0] & 1) != 0) result = this.multiplyMod(result, a);\n        k = RSAUtils.biShiftRight(k, 1);\n        if (k.digits[0] == 0 && RSAUtils.biHighIndex(k) == 0) break;\n        a = this.multiplyMod(a, a);\n    }\n    return result;\n}\n\nvar RSAKeyPair = function(encryptionExponent, decryptionExponent, modulus) {\n    var $dmath = RSAUtils;\n    this.e = $dmath.biFromHex(encryptionExponent);\n    this.d = $dmath.biFromHex(decryptionExponent);\n    this.m = $dmath.biFromHex(modulus);\n    // We can do two bytes per digit, so\n    // chunkSize = 2 * (number of digits in modulus - 1).\n    // Since biHighIndex returns the high index, not the number of digits, 1 has\n    // already been subtracted.\n    this.chunkSize = 2 * $dmath.biHighIndex(this.m);\n    this.radix = 16;\n    this.barrett = new $w.BarrettMu(this.m);\n};\n\nRSAUtils.getKeyPair = function(encryptionExponent, decryptionExponent, modulus) {\n    return new RSAKeyPair(encryptionExponent, decryptionExponent, modulus);\n};\n\nif(typeof $w.twoDigit === 'undefined') {\n    $w.twoDigit = function(n) {\n        return (n < 10 ? \"0\" : \"\") + String(n);\n    };\n}\n\n// Altered by Rob Saunders (rob@robsaunders.net). New routine pads the\n// string after it has been converted to an array. This fixes an\n// incompatibility with Flash MX's ActionScript.\nRSAUtils.encryptedString = function(key, s) {\n    var a = [];\n    var sl = s.length;\n    var i = 0;\n    while (i < sl) {\n        a[i] = s.charCodeAt(i);\n        i++;\n    }\n\n    while (a.length % key.chunkSize != 0) {\n        a[i++] = 0;\n    }\n\n    var al = a.length;\n    var result = \"\";\n    var j, k, block;\n    for (i = 0; i < al; i += key.chunkSize) {\n        block = new BigInt();\n        j = 0;\n        for (k = i; k < i + key.chunkSize; ++j) {\n            block.digits[j] = a[k++];\n            block.digits[j] += a[k++] << 8;\n        }\n        var crypt = key.barrett.powMod(block, key.e);\n        var text = key.radix == 16 ? RSAUtils.biToHex(crypt) : RSAUtils.biToString(crypt, key.radix);\n        result += text + \" \";\n    }\n    return result.substring(0, result.length - 1); // Remove last space.\n};\n\nRSAUtils.decryptedString = function(key, s) {\n    var blocks = s.split(\" \");\n    var result = \"\";\n    var i, j, block;\n    for (i = 0; i < blocks.length; ++i) {\n        var bi;\n        if (key.radix == 16) {\n            bi = RSAUtils.biFromHex(blocks[i]);\n        }\n        else {\n            bi = RSAUtils.biFromString(blocks[i], key.radix);\n        }\n        block = key.barrett.powMod(bi, key.d);\n        for (j = 0; j <= RSAUtils.biHighIndex(block); ++j) {\n            result += String.fromCharCode(block.digits[j] & 255,\n                block.digits[j] >> 8);\n        }\n    }\n    // Remove trailing null, if any.\n    if (result.charCodeAt(result.length - 1) == 0) {\n        result = result.substring(0, result.length - 1);\n    }\n    return result;\n};\n\nRSAUtils.setMaxDigits(130);\nexport default  RSAUtils;\n"]}]}